---
title: "HW 02"
author: "Seldon David Kyle"
format: 
  html:
    embed-resources: true
toc: true
execute:
  warning: false
  error: false
  message: false
---

```{r}
#| label: load-pkgs
#| message: false
#| echo: false

if (!require("pacman")) 
  install.packages("pacman, ggridges")

pacman::p_load(tidyverse,
               ggridges,
               viridis,
               dsbox,
               fs,
               janitor,
               scales,
               tibble,
               ggforce,
               palmerpenguins)

```

## 1 - A new day, a new plot, a new geom

```{r}

# filter and reorder
edibnb_clean <- dsbox::edibnb |>
  filter(!is.na(review_scores_rating), !is.na(neighbourhood)) |>
  mutate(
    neighbourhood_ordered = fct_reorder(
      neighbourhood,
      review_scores_rating,
      .fun  = median
    )
  )

# plot
ggplot(edibnb_clean, aes(
    x = review_scores_rating,
    y = neighbourhood_ordered
  )) +
  geom_density_ridges(
    fill  = "steelblue",
    color = "white",
    alpha = 0.7,
    scale = 1.3
  ) +
  labs(
    title   = "Airbnb Review Scores by Edinburgh Neighborhood",
    x       = "Review Score",
    y       = "Neighborhood (highest median at top)",
    caption = "Source: edibnb from the dsbox library"
  ) +
  theme_ridges(grid = TRUE) +
  theme(
    plot.title      = element_text(hjust = 0),  # left align
    legend.position = "none"
  )



```

Most neighborhoods examined show generally high reviews. The neighborhoods with the highest medians display tighter clusters communicating consistently high guest satisfaction. The lower scored neighborhoods have flatter more spread plots meaning a wider variety of satisfaction. Outliers on the low end of the scale force a lot of white space.

## 2 - Foreign Connected PACs

### Load Data

```{r}
# get a list of files with "Foreign Connected PAC" in their names
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# read all files and row bind them
# keeping track of the file name in a new column called year
pac <- read_csv(list_of_files, id = "year")

```

### Clean Data

```{r}
pac_year <- pac |>
  # clean headers
  clean_names() |>
  # strip chars before year range and .csv
  mutate(year = basename(year) |> str_remove("\\.csv$")) |>
  # split into year_start and year on the "-" char
  separate(
    col     = year,
    into    = c("year_start", "year"),
    sep     = "-",
    convert = TRUE
  ) |>
  # drop the year_start column
  select(-year_start) |>
  separate(
    col     = country_of_origin_parent_company,
    into    = c("country_of_origin", "parent_company"),
    sep     = "/",
    convert = TRUE
  ) |>
  # now drop negatives. I don't know what a negative would mean in this context
 filter(
    !str_detect(dems, "-"),
    !str_detect(repubs, "-")
  ) |>
 # turn dems and repubs inot dbls
  mutate(
    dems   = parse_number(dems),
    repubs = parse_number(repubs)
  ) |>   
  # drop the total column
  select(-total)

```

### Pivoting data

```{r}
pac_long <- pac_year |>
  pivot_longer(
    cols      = c(dems, repubs),
    names_to  = "party",
    values_to = "amount"
  ) |>
  mutate(
    party = recode(party,
                   dems   = "Democrat",
                   repubs = "Republican")
  )


```

### Summarize for the UK

```{r}
uk_summary <- pac_long |>
  filter(country_of_origin == "UK") |>
  group_by(year, party) |>
  summarise(
    total_amount = sum(amount, na.rm = TRUE),
    .groups      = "drop"
  ) |>
  arrange(year, party)

```

### Recreate Plot

```{r}
max_year     <- max(uk_summary$year)
lower_bound  <- 1e6 * 0.8  

ggplot(uk_summary, aes(x = year, y = total_amount, color = party)) +
  geom_line(size = 1.2) +
  scale_color_manual(values = c(Democrat = "blue", Republican = "red")) +
  scale_x_continuous(
    limits = c(2000, max_year),
    breaks = seq(2000, max_year, by = 5)
  ) +
  scale_y_continuous(
    labels = dollar_format(scale = 1e-6, suffix = "M"),
    limits = c(lower_bound, max(uk_summary$total_amount)),
    expand = c(0, 0)
  ) +
  labs(
    # single‐line title, no explicit newline
    title   = "Contributions to US Political Parties from UK-Connected PACs",
    x       = "Year",
    y       = "Total amount",
    caption = "Source: OpenSecrets.org"
  ) +
  coord_cartesian(clip = "off") +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title          = element_text(
                            hjust = 0.3,
                            size  = 14,
                            margin = margin(b = 10)  # a bit of space below
                          ),
    axis.title.x.position = "plot",
    axis.title.x          = element_text(hjust = 0),
    axis.title.y.position = "plot",
    axis.title.y          = element_text(
                            angle = 90,
                            vjust = 1,
                            hjust = 0
                          ),
    legend.position     = c(0.85, 0.15),
    legend.background   = element_rect(fill = alpha("white", 0.6), color = NA),
    legend.title        = element_blank(),
    plot.margin         = margin(t = 5, r = 5, b = 5, l = 40)
  )



```

### Recreate Plot For Canada

```{r}
ca_summary <- pac_long |>
  filter(country_of_origin == "Canada") |>
  group_by(year, party) |>
  summarise(
    total_amount = sum(amount, na.rm = TRUE),
    .groups      = "drop"
  ) |>
  arrange(year, party)

ca_summary |>
  glimpse()

```

```{r}
min_amt    <- min(ca_summary$total_amount)
max_year   <- max(ca_summary$year)
max_amt    <- max(ca_summary$total_amount)

lower_bound <- min_amt * 0.95  # 5% below the smallest value

ggplot(ca_summary, aes(year, total_amount, color = party)) +
  geom_line(size = 1.2) +
  scale_color_manual(values = c(Democrat = "blue", Republican = "red")) +
  scale_x_continuous(
    limits = c(2000, max_year),
    breaks = seq(2000, max_year, by = 5)
  ) +
  scale_y_continuous(
    labels = dollar_format(scale = 1e-6, suffix = "M"),
    limits = c(lower_bound, max_amt),
    expand = c(0, 0)
  ) +
  labs(
    title   = "Contributions to US Political Parties from Canada-Connected PACs",
    x       = "Year",
    y       = "Total amount",
    caption = "Source: OpenSecrets.org"
  ) +
  coord_cartesian(clip = "off") +
  theme_minimal() +
  theme(
    plot.title.position    = "plot",
    plot.title             = element_text(hjust = 0, size = 12),
    axis.title.x.position  = "plot",
    axis.title.x           = element_text(hjust = 0),
    axis.title.y.position  = "plot",
    axis.title.y           = element_text(angle = 90, vjust = 1, hjust = 0),
    legend.position        = c(0.85, 0.15),
    legend.background      = element_rect(fill = alpha("white", 0.6), color = NA),
    legend.title           = element_blank(),
    plot.margin            = margin(t = 5, r = 5, b = 5, l = 40)
  )
```

#### Interpretation

Canada-connected PACs ramp up around every federal election, briefly lean Democratic in 2008–2010, then shift to a strong Republican advantage through the 2010s. Overall, there has been a sharp increase in overall spending by both parties.

## 3 - Median housing prices in the US

### Load Data

```{r}
median_housing <- read.csv("data/median-housing.csv")
recessions <- read_csv("data/recessions.csv")


```

### Rename and Clean Data

```{r}
median_housing2 <- median_housing |>
  # rename columns
  rename(
    date  = DATE,
    price = MSPUS
  ) |>
  # parse the date strings into actual Date objects
  mutate(
    date = ymd(date)
  )

# verify
median_housing2 |> glimpse()
```

### Create Plot

```{r}
# compute bounds
max_date  <- max(median_housing2$date)
max_price <- max(median_housing2$price, na.rm = TRUE)

ggplot(median_housing2, aes(x = date, y = price)) +
  # housing price line
  geom_line(color = "steelblue", size = 1) +
  # x starts at 1965, 5-year breaks
  scale_x_date(
    breaks = seq(as.Date("1965-01-01"), max_date, by = "5 years"),
    date_labels = "%Y",
    expand      = c(0, 0)
  ) +
  # y starts at zero
  scale_y_continuous(
    labels = comma,
    breaks = seq(0, max_price, by = 40000),
    limits = c(0, max_price),
    expand = c(0, 0)
  ) +
  labs(
    title    = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x        = NULL,
    y        = "Dollars",
    caption  = "Sources: Census; HUD"
  ) +
  theme_minimal() +
  theme(
    # title & subtitle styling
    panel.grid.major.x     = element_blank(),
    panel.grid.minor.x     = element_blank(),
    panel.grid.major.y     = element_line(color = "grey80"),
    panel.grid.minor.y     = element_blank(),
    # title and subtitle
    plot.title.position    = "plot",
    plot.title             = element_text(hjust = 0, size = 14),
    plot.subtitle          = element_text(hjust = 0, size = 10, margin = margin(b = 8), face = "bold"),
    axis.title.y.position  = "plot",
    axis.title.y           = element_text(angle = 90, hjust = 0.5, vjust = 0.5, face = "bold"),
    # captions
    plot.caption           = element_text(hjust = 1, face = "bold"),
    
    plot.margin            = margin(t = 5, r = 5, b = 5, l = 5)
  )




```

### Add Recession Data

```{r}
# compute the date range covered by your housing data
min_date <- min(median_housing2$date)
max_date <- max(median_housing2$date)

# flag recessions whose entire span falls within that range
recessions_flagged <- recessions |>
  mutate(
    in_range = (Peak >= min_date) & (Trough <= max_date)
  )

rec_in_range <- recessions_flagged |>
  filter(in_range)
```

### Plot With Recessions

```{r}
max_date <- max(median_housing2$date)
max_price <- max(median_housing2$price, na.rm = TRUE)

ggplot() +
  # recession shading
  geom_rect(
    data = rec_in_range,
    aes(xmin = Peak, xmax = Trough, ymin = -Inf, ymax = Inf),
    inherit.aes = FALSE,
    fill = "grey80",
    alpha = 0.5
  ) +
  # housing price line
  geom_line(
    data = median_housing2,
    aes(x = date, y = price),
    color = "steelblue",
    size = 1
  ) +
  # x starts at 1965, 5-year breaks
  scale_x_date(
    breaks = seq(as.Date("1965-01-01"), max_date, by = "5 years"),
    date_labels = "%Y",
    expand      = c(0, 0)
  ) +
  # y starts at zero
  scale_y_continuous(
    limits = c(0, max_price),
    breaks = seq(0, max_price, by = 40000),
    labels = comma,
    expand = c(0, 0)
  ) +
  labs(
    title    = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x        = NULL,
    y        = "Dollars",
    caption  = "Sources: Census; HUD"
  ) +
  coord_cartesian(clip = "off") +
  theme_minimal() +
  theme(
    # title & subtitle styling
    plot.title.position   = "plot",
    plot.title            = element_text(hjust = 0, size = 14),
    plot.subtitle         = element_text(hjust = 0, size = 10, face = "bold", margin = margin(b = 8)),
    axis.title.y.position = "plot",
    axis.title.y          = element_text(angle = 90, hjust = 0.5, vjust = 0.5, face = "bold"),
    axis.title.x.position = "plot",
    axis.title.x          = element_text(hjust = 0),
    panel.grid.major.x    = element_blank(),
    panel.grid.minor.x    = element_blank(),
    panel.grid.major.y    = element_line(color = "grey80"),
    panel.grid.minor.y    = element_blank(),
    # captions
    plot.caption          = element_text(hjust = 1, face = "bold"),
    plot.margin           = margin(t = 5, r = 5, b = 5, l = 5)
  )


```

### Subset of median_housing For 2019 and 2020

```{r}
med_qtr <- median_housing2 |>
  # derive year and quarter
  mutate(
    year    = year(date),
    quarter = paste0("Q", quarter(date))
  ) |>
  filter(year %in% c(2019, 2020))

med_qtr |>
  glimpse()
```

### Plot

```{r}

# expand the x-axis by a day in each direction so the data points arent clipped
date_min <- min(med_qtr$date) - days(1)
date_max <- max(med_qtr$date) + days(1)
# y-scale
y_lower  <- 300000    
y_upper  <- 360000    

ggplot(med_qtr, aes(x = date, y = price)) +
  # housing price line
  geom_line(color = "steelblue", size = 1) +
  geom_point(color = "steelblue", fill = "white", shape = 21, size = 3) +
  # x-scale by quarter
  scale_x_date(
    limits = c(date_min, date_max),
    breaks = med_qtr$date,
    labels = med_qtr$quarter,
    expand = c(0, 0)
  ) +
  # y 300k to 360k by 20k
  scale_y_continuous(
    limits = c(y_lower, y_upper),
    breaks = seq(y_lower, y_upper, by = 20000),
    labels = comma,
    expand = c(0, 0)
  ) +
  # annotate year labels and position them
  coord_cartesian(clip = "off") +
  annotate(
    "text",
    x     = as.Date("2019-05-15"),
    y     = -Inf,
    label = "2019",
    vjust = 3,
    size  = 4
  ) +
  annotate(
    "text",
    x     = as.Date("2020-05-15"),
    y     = -Inf,
    label = "2020",
    vjust = 3,
    size  = 4
  ) +
  
  labs(
    title    = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x        = NULL,
    y        = "Dollars"
  ) +
  # title & subtitle styling
  theme_minimal() +
  theme(
    panel.grid.major.x  = element_line(color = "grey80"),
    panel.grid.minor.x  = element_blank(),
    panel.grid.major.y  = element_line(color = "grey80"),
    panel.grid.minor.y  = element_blank(),
    plot.title.position = "plot",
    plot.title          = element_text(hjust = 0),
    plot.subtitle       = element_text(face = "bold", hjust = 0),
    axis.title.y.position = "plot",
    axis.title.y          = element_text(angle = 90, face = "bold", hjust = 0.5, vjust = 0.5),
    axis.title.x.position = "plot",
    axis.title.x          = element_text(hjust = 0),
    plot.margin           = margin(t = 5, r = 5, b = 25, l = 5)
  )


```

## 4 - Expect More. Plot More.

```{r}


# circle definitions
outer  <- tibble(x0 = 0, y0 = 0, r = 1.0)
hole   <- tibble(x0 = 0, y0 = 0, r = 0.68)
center <- tibble(x0 = 0, y0 = 0, r = 0.27)
copy_circle <- tibble(x0 = 0.45, y0 = -1.38, r = 0.06)

# text label
label_df <- tibble(x = -0.083, y = -1.3, label = "TARGET")
label_R <- tibble(x = 0.45, y = -1.375, label = "R")

ggplot() +
  # draw the three logo circles and the copyright circle
  geom_circle(data = outer,  aes(x0 = x0, y0 = y0, r = r),
              fill = "#CC0000", color = NA) +
  geom_circle(data = hole,   aes(x0 = x0, y0 = y0, r = r),
              fill = "white",  color = NA) +
  geom_circle(data = center, aes(x0 = x0, y0 = y0, r = r),
              fill = "#CC0000", color = NA) +
  geom_circle(data = copy_circle, aes(x0 = x0, y0 = y0, r = r),
              , color = "#CC0000", size  = 1) +
  # add text
  geom_text(data = label_df,
            aes(x = x, y = y, label = label),
            color    = "#CC0000",
            fontface = "bold",
            size     = 10) +
  geom_text(data = label_R,
            aes(x = x, y = y, label = label),
            color    = "#CC0000",
            fontface = "bold",
            size     = 3.5) +
  # fix aspect ratio and allow margin for text
  coord_equal(
    xlim = c(-1.2, 1.2),
    ylim = c(-1.5, 1.2),
    clip = "off"
  ) +
  theme_void()


```

Target red sourced from <https://www.brandcolorcode.com/target>

## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?

```{r}
penguins2 <- penguins |>
  filter(!is.na(bill_length_mm), !is.na(bill_depth_mm))

ggplot(penguins2, aes(
    x     = bill_length_mm,
    y     = bill_depth_mm,
    color = species,
    shape = island
  )) +
  scale_color_manual(values = c(
    Adelie    = "hotpink",
    Chinstrap = "limegreen",
    Gentoo    = "cyan"
  )) +
  scale_shape_manual(values = c(
    Biscoe   = 15,
    Dream    = 17,
    Torgersen = 18
  )) +
  geom_point(size = 3, alpha = 0.8) +
  labs(
    title    = "Penguin Bill Dimensions by Species and Island",
    x        = "Bill length (mm)",
    y        = "Bill depth (mm)",
    color    = "Species",
    shape    = "Island",
    caption  = "Source: palmerpenguins"
  ) +
  theme_minimal() +
  theme(
    plot.background   = element_rect(fill = "purple", color = "black", linewidth = 2),
    panel.background  = element_rect(fill = "lightgreen", color = NA),
    
    panel.grid.major  = element_line(color = "orange", linewidth = 2),
    panel.grid.minor  = element_line(color = "red",
                                     linewidth = 1, linetype = "dashed"),
    
    axis.text.x = element_text(angle = 45, hjust = 1,
                               color = "blue", size = 14),
    axis.text.y = element_text(angle = 90, vjust = 0.5,
                               color = "red", size = 14),
    
    axis.title.x = element_text(color = "green", size = 16,
                                angle = 0, face = "bold"),
    axis.title.y = element_text(color = "brown", size = 16,
                                angle = 0, face = "bold.italic"),
    
    plot.title    = element_text(hjust = 1, size = 24,
                                 color = "red", face = "bold"),
    plot.subtitle = element_text(hjust = 0, size = 18,
                                 color = "pink", face = "italic"),
    legend.background = element_rect(fill = "yellow", color = "red", 
                                     linewidth = 2),
    legend.title      = element_text(color = "blue", face = "bold.italic"),
    legend.text       = element_text(color = "black", size = 12, angle = 30),
    
    plot.caption      = element_text(color = "cyan", size = 12, angle = -30)
  )

```
